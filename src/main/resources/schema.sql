CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    user_name CHARACTER VARYING,
    user_email CHARACTER VARYING NOT NULL UNIQUE,
    user_login CHARACTER VARYING NOT NULL UNIQUE,
    user_birthday DATE

  );

  CREATE TABLE IF NOT EXISTS mpa_ratings (
    rating_id INTEGER PRIMARY KEY,
    rating    CHARACTER VARYING(10) NOT NULL,
    description CHARACTER VARYING(200)
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER AUTO_INCREMENT PRIMARY KEY,
    name CHARACTER VARYING NOT NULL,
    description CHARACTER VARYING(200),
    release_date DATE,
    duration INTEGER,
    mpa_id INTEGER,

    CONSTRAINT films_mpa_fk FOREIGN KEY (mpa_id) REFERENCES MPA_RATINGS(rating_id)
  );

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER PRIMARY KEY,
    genre_name CHARACTER VARYING NOT NULL
);

CREATE TABLE IF NOT EXISTS films_genres (
    FILM_ID  INT NOT NULL,
    GENRE_ID INT NOT NULL,

     PRIMARY KEY(film_id, genre_id),
    CONSTRAINT FILM_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    CONSTRAINT GENRE_ID_FK
        FOREIGN KEY (GENRE_ID) REFERENCES GENRES (GENRE_ID)
);


CREATE TABLE IF NOT EXISTS films_likes (
    film_id  INT NOT NULL,
    user_id  INT NOT NULL,

    PRIMARY KEY(film_id, user_id),
    CONSTRAINT FILMS_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    CONSTRAINT USER_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS friend_list (
    user_id INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    confirmed BOOLEAN,


    PRIMARY KEY(user_id, friend_id),

    CONSTRAINT FRIEND_LIST_FK FOREIGN KEY (user_id) REFERENCES  USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
	CONSTRAINT FRIEND_LIST_FK_1 FOREIGN KEY (friend_id) REFERENCES  USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);